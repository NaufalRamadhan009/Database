//6.1
1. CREATE PROCEDURE ...
DELIMITER $$
MariaDB [dbpos1]> CREATE PROCEDURE pro_naik(
    -> IN jenis_produk INT,
    -> IN persentasi_kenaikan INT )
    -> BEGIN
    -> UPDATE produk SET harga_jual = harga_jual + (harga_jual * persentasi_kenaikan / 100)
    -> WHERE jenis_produk_id = jenis_produk;
    -> END $$
DELIMITER ;
MariaDB [dbpos1]> CALL pro_naik(1,4); 4 disini adalah 4%
CREATE PROCEDURE pro_naikan_harga

2. MariaDB [dbpos1]> CREATE FUNCTION umur(tgl_lahir DATE)
    -> RETURNS INT
    -> BEGIN
    -> DECLARE umur INT;
    -> SET umur = YEAR(CURDATE()) - YEAR(tgl_lahir);
    -> RETURN umur;
    -> END $$
Query OK, 0 rows affected (0.038 sec)
MariaDB [dbpos1]> SELECT nama, umur(tgl_lahir) AS umur FROM pelanggan;

3. CREATE FUNCTION ...
DELIMITER $$
MariaDB [dbpos3]> CREATE FUNCTION kategori_harga(harga_beli DOUBLE)
    -> RETURNS
    -> VARCHAR(255)
    -> BEGIN
    -> DECLARE kategori_harga VARCHAR(255);
    -> CASE
    -> WHEN harga_beli <= 500000 THEN
    -> SET kategori_harga = 'murah';
    -> WHEN harga_beli <= 500000 AND harga_beli <= 3000000 THEN
    -> SET kategori_harga = 'sedang';
    -> WHEN harga_beli > 500000 AND harga_beli <= 10000000 THEN
    -> SET kategori_harga = 'mahal';
    -> ELSE
    -> SET kategori_harga = 'sangat mahal';
    -> END CASE;
    ->
    -> RETURN kategori_harga;
    -> END $$
Query OK, 0 rows affected, 5 warnings (0.123 sec)

MariaDB [dbpos3]> DELIMITER ;
MariaDB [dbpos3]> SELECT nama, kategori_harga(harga_jual) AS kategori_harga FROM produk;


//6.2
1. 1. Pelanggan memesan didalam table pesanan
SELECT * FROM pesanan;
Didalam table pembayaran tambahkan kolom status_pembayaran
ALTER TABLE pembayaran ADD status_pembayaran varchar(25);
2. Dilanjutkan dengan proses pembayaran di table pembayaran
DELIMITER $$
CREATE TRIGGER cek_pembayaran BEFORE INSERT ON pembayaran
FOR EACH ROW
BEGIN
DECLARE total_bayar DECIMAL(10, 2);
DECLARE total_pesanan DECIMAL(10, 2);
SELECT SUM(jumlah) INTO total_bayar FROM pembayaran WHERE pesanan_id = NEW.pesanan_id;
SELECT total INTO total_pesanan FROM pesanan WHERE id = NEW.pesanan_id;
4. Jika pesanan sudah dibayar maka status pembayaran akan berubah menjadi lunas
IF total_bayar + NEW.jumlah >= total_pesanan THEN
SET NEW.status_pembayaran = 'Lunas';
END IF;
END $$
DELIMITER ;
// Menambahkan data pada tabel pembayaran
INSERT INTO pembayaran (no_kuitansi, tanggal, jumlah, ke, pesanan_id, status_pembayaran)
VALUES ('KWI001', '2023-03-03', 200000, 1, 1);

2. CREATE PROCEDURE kurang_stok(
    -> IN produk_id INT,
    -> IN qty INT
    -> )
    -> BEGIN
    -> DECLARE stok_tersedia INT;
    -> SELECT stok INTO stok_tersedia FROM produk WHERE id = produk_id;
    -> SET stok_tersedia = stok_tersedia - qty;
    -> UPDATE produk SET stok = stok_tersedia WHERE id = produk_id;
    -> END $$
Query OK, 0 rows affected (0.024 sec)
MariaDB [dbpos3]> DELIMITER ;
MariaDB [dbpos3]> CALL kurang_stok(2,5);
Query OK, 2 rows affected (0.028 sec)
MariaDB [dbpos3]> select * from produk;

3. DELIMITER $$
CREATE TRIGGER trig_kurangi_stok
AFTER INSERT ON pesanan_items
FOR EACH ROW 
BEGIN
DECLARE produk_id INT;
DECLARE qty INT;
SELECT new.produk_id, new.qty INTO produk_id, qty;
CALL kurang_stok(produk_id,qty);
END $$

DELIMITER ;
INSERT INTO pesanan_items(produk_id,qty) VALUES (1,1);

